<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Tan Duc Mai</title>
    <link>https://blissful-mayer-90b8fc.netlify.app/categories/python/</link>
    <description>Recent content in python on Tan Duc Mai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 17 Dec 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blissful-mayer-90b8fc.netlify.app/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Credit Card Validator</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/credit-card-validator/</link>
      <pubDate>Fri, 17 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/credit-card-validator/</guid>
      <description>→ GitHub Introduction Chances are you have a credit card in your wallet or purse. Credit card numbers have a &amp;lsquo;checksum&amp;rsquo; built into them, a mathematical relationship between at least one number and the others. The checksum enables a computer to detect typos, if not fraudulent numbers, without having to query a database (which can be slow). Most cards use an algorithm invented by Hans Peter Luhn, a scientist who worked for IBM.</description>
    </item>
    
    <item>
      <title>Blackjack</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/blackjack/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/blackjack/</guid>
      <description>→ GitHub Introduction In a standard game of 2-player Blackjack the player and the dealer are dealt 2 cards. The player shows both cards face-up. The dealer shows one of their cards face-up and one face-down. The player decides to draw cards by saying, &amp;ldquo;hit&amp;rdquo;, or stop drawing cards by saying, &amp;ldquo;stand&amp;rdquo;. They will draw cards trying to get their total hand value as close to 21 as possible without going over.</description>
    </item>
    
    <item>
      <title>List Module</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/list-module/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/list-module/</guid>
      <description>→ GitHub Introduction to Python Lists A list is an object that contains multiple data items. Lists are mutable, which means that their contents can be changed during a program’s execution. Lists are dynamic data structures, meaning that items may be added to them or removed from them. Indexing, slicing, and various methods can be used to work with lists in a program.
Aim Create a list module containing several common Python list methods and built-in functions.</description>
    </item>
    
    <item>
      <title>Caesar Cipher Cryptography</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/caesar-cipher-cryptography/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/caesar-cipher-cryptography/</guid>
      <description>→ GitHub Aim Use Caesar Cipher technique to encrypt or decrypt an inputted message.
Introduction A simple way to encrypt data is attributed to Julius Caesar, the Roman Emperor. This method takes each character in a message and replaces it with one which is a certain distance (offset) along the alphabet from it.
For example: If the offset is 3 then A becomes D, B becomes E, C becomes F etc.</description>
    </item>
    
    <item>
      <title>Petals Around The Rose</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/petals-around-the-rose/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/petals-around-the-rose/</guid>
      <description>→ GitHub Introduction The name of the game is Petals Around the Rose and the name of the game is important. The computer will roll five dice and ask the user to guess the score for the roll. The score will always be an even number (including zero). The user’s mission is to work out how the computer calculates the score in order to become a Potentate of the Rose.</description>
    </item>
    
    <item>
      <title>Three Prime Checker</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/three-prime-checker/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/three-prime-checker/</guid>
      <description>→ GitHub Introduction I came up with three different algorithms for determining whether a number is prime. After running the three, I use a special procedure to time the efficiency of each algorithm to find out which is better than another. The core of this project is to adopt different perspectives on a problem, with each way of handling a problem will have pros or cons over another.
Algorithms 1. Exclude n if n&amp;lt;2.</description>
    </item>
    
    <item>
      <title>Multi-level Guessing Game</title>
      <link>https://blissful-mayer-90b8fc.netlify.app/projects/multi-level-guessing-game/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blissful-mayer-90b8fc.netlify.app/projects/multi-level-guessing-game/</guid>
      <description>→ GitHub Aim Create a number guessing game divided into three levels of difficulty. I divide this project into small functions and place them in separate files to be used as modules.
Implementation I begin by greeting the user and prompt them to choose which level (easy, medium, or hard) they want to play | welcome.py. With that option, I then start the corresponding function which is stored in options.py</description>
    </item>
    
  </channel>
</rss>