<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tan Duc Mai</title>
    <link>https://tanducmai.com/posts/</link>
    <description>Recent content in Posts on Tan Duc Mai</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 23 Mar 2022 09:51:54 +1030</lastBuildDate>
    
	<atom:link href="https://tanducmai.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python - OOP - Class Variables</title>
      <link>https://tanducmai.com/posts/python-oop-class-variables/</link>
      <pubDate>Wed, 23 Mar 2022 09:51:54 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/python-oop-class-variables/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Database - SQL - Aggregate Functions</title>
      <link>https://tanducmai.com/posts/database-sql-aggregate-functions/</link>
      <pubDate>Tue, 22 Mar 2022 17:34:33 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-aggregate-functions/</guid>
      <description>Table of Contents  Aggregate Queries? COUNT() SUM() AVG() MAX() &amp;amp; MIN() Maths in SELECT Clause A Common Error  Aggregate Queries Aggregate queries or aggregation is a method of performing computations over sets of numerical values in multiple tuples of a relation and returning a single value.
SQL provides users with many aggregate functions for aggregate queries, including AVG, COUNT, SUM, MIN, MAX, etc.
Aggregate functions can be used within three clauses, namely SELECT, HAVING, and ORDER BY.</description>
    </item>
    
    <item>
      <title>Database - SQL - Set Operators</title>
      <link>https://tanducmai.com/posts/database-sql-set-operators/</link>
      <pubDate>Mon, 21 Mar 2022 10:34:07 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-set-operators/</guid>
      <description>Table of Contents  Example Database SET Operators UNION Operator UNION ALL Operator INTERSECT Operator INTERSECT ALL Operator INTERSECT and INNER JOIN EXCEPT Operator  Example Database The below two relations will be used as examples for this post.
SET Operators Set operators are used to combine tuples of query results.
Standard SQL syntax with set operators:
 Inside a SelectSQL statement, a WHERE clause and some keywords (e.g. ORDER BY) can be included.</description>
    </item>
    
    <item>
      <title>Database - SQL - Nested Queries</title>
      <link>https://tanducmai.com/posts/database-sql-nested-queries/</link>
      <pubDate>Wed, 16 Mar 2022 16:15:06 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-nested-queries/</guid>
      <description>Table of Contents  Aliases Nested Queries? Nested Query Rules Qualifying Attribute Names Operators Compare with the JOIN Keyword Nested Queries using Negation NOT IN Operator Nested Queries using ALL Operator EXISTS and IN Operators Nested Queries using EXISTS Operator Nested Queries using NOT EXISTS Operator Nested Queries in SELECT Clause Nested Queries in FROM Clause Comments on Nested Queries  Aliases A Nested query is also called a Subquery or an Inner query.</description>
    </item>
    
    <item>
      <title>Python - OOP - Inheritance</title>
      <link>https://tanducmai.com/posts/python-oop-inheritance/</link>
      <pubDate>Wed, 16 Mar 2022 10:23:54 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/python-oop-inheritance/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Database - SQL - Table Joins</title>
      <link>https://tanducmai.com/posts/database-sql-table-joins/</link>
      <pubDate>Tue, 15 Mar 2022 15:38:40 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-table-joins/</guid>
      <description>Table Of Contents  JOIN Keyword Table Aliases INNER JOIN Keyword Duplicate Column Names Multiple Attributes in a Join Condition OUTER JOIN Keyword LEFT [OUTER] JOIN Keyword RIGHT [OUTER] JOIN Keyword FULL [OUTER] JOIN Keyword Summary of JOIN  JOIN keyword Tables (relations) can be combined to form a new relation using the JOIN keyword.
This relation can have a combination of the attributes from the tables used in the query.</description>
    </item>
    
    <item>
      <title>Database - SQL - Query Writing</title>
      <link>https://tanducmai.com/posts/database-sql-query-writing/</link>
      <pubDate>Mon, 14 Mar 2022 22:16:08 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-query-writing/</guid>
      <description>Table of Contents  Why Query? SELECT Statement WHERE Condition DISTINCT Keyword AS Keyword ORDER BY Keyword TOP Keyword Summary  Why Query Now that we have got our tables storing data (records), let&amp;rsquo;s start asking questions (queries) about those data.
SELECT statement This statement is used to retrieve data from the database.
SELECT syntax:
SELECT &amp;lt;selectList&amp;gt; FROM &amp;lt;tableName&amp;gt; WHERE &amp;lt;conditions&amp;gt;;  The SELECT clause defines the target list of attributes/values to be returned.</description>
    </item>
    
    <item>
      <title>Database - SQL - Data Manipulation</title>
      <link>https://tanducmai.com/posts/database-sql-data-manipulation/</link>
      <pubDate>Fri, 11 Mar 2022 11:53:55 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-data-manipulation/</guid>
      <description>Table of Contents  Data Manipulation INSERT INTO Statement DELETE FROM Statement DELETE FROM and DROP TABLE Statements UPDATE Statement  Data Manipulation So we have created a set of tables. However:
 How do we actually put data in our database? How do we modify data that is already in our database? How do we answer questions (queries) using our database data?  Key Data Manipulation SQL commands:
 INSERT INTO - Creates new tuple(s) in a table.</description>
    </item>
    
    <item>
      <title>Database - SQL - Table Constraints</title>
      <link>https://tanducmai.com/posts/database-sql-table-constraints/</link>
      <pubDate>Thu, 10 Mar 2022 23:40:53 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-sql-table-constraints/</guid>
      <description>Table Of Contents  Definition Hypotheses Syntax Categorisation Intra-relational Constraints Inter-relational Constraints  Definition Constraints are clauses that need to be satisfied by data in the database.
Constraints are like contracts to guard against bad data.
Data that does not meet the rules of a given constraint will not be saved to the database.
 The whole tuple (new record) gets rejected and the DBMS throws an SQL Error. For example:  PRIMARY KEY Violation FOREIGN KEY Violation CHECK CONSTRAINT Violation    Hypotheses Consider this example:</description>
    </item>
    
    <item>
      <title>Database - Physical Design</title>
      <link>https://tanducmai.com/posts/database-physical-design/</link>
      <pubDate>Wed, 09 Mar 2022 23:40:53 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-physical-design/</guid>
      <description>Table Of Contents  Physical Modelling? SQL Overview Table Creation and Manipulation Table Definition Table Modification  Physical Modelling After the conceptual design and the physical design, the next phase is to take the relational schemas and implement them using a DBMS.
 Structured Query Language (SQL) is a higher-level language (4GL) used to create the relational database and manage data within the database.  For example:
CREATE TABLE Project ( projectName varchar(200), budget decimal(6,2), manager varchar(200), CONSTRAINT PK_Project PRIMARY KEY (projectName), CONSTRAINT FK_Project_Manager FOREIGN KEY (manager) REFERENCES Manager (name) ); SQL Overview Categorisation SQL commands can be categorised into:</description>
    </item>
    
    <item>
      <title>Database - Logical Design</title>
      <link>https://tanducmai.com/posts/database-logical-design/</link>
      <pubDate>Tue, 08 Mar 2022 23:19:58 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-logical-design/</guid>
      <description>Table Of Contents  Logical Modelling? Logical Design Classes Associations - Multiplicities Recursive Relationships / Self Associations Multivalued Attributes Inheritance  Logical Modelling After the conceptual design, the next phase is to create functional relational schemas based on the conceptual design.
 A written description of how the relational database will be implemented. This includes deciding which CK(s) will become the PK.  Logical Design The logical design of the database is the UML translation process.</description>
    </item>
    
    <item>
      <title>Database - Conceptual Design</title>
      <link>https://tanducmai.com/posts/database-conceptual-design/</link>
      <pubDate>Mon, 07 Mar 2022 19:30:29 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-conceptual-design/</guid>
      <description>Table of Contents  Conceptual Modelling? Conceptual Design? Design Process Conceptual Modelling? Entity-Relationship Model Unified Modelling Language Diagram UML Diagram Example Association Multiplicity Summary of Multiplicity Syntax Association Class Recursive Relationships / Self Associations Aggregation Composition Strong and Weak Entity Type Inheritance (Superclass - Subclass)  Conceptual Modelling Overall, Database requirements are collected and visualised as a UML diagram.
 Uses a higher-level language (4GL) to abstract away the complexities of implementation.</description>
    </item>
    
    <item>
      <title>Database - Normalisation</title>
      <link>https://tanducmai.com/posts/database-normalisation/</link>
      <pubDate>Sat, 26 Feb 2022 01:05:26 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-normalisation/</guid>
      <description>Table of Contents  Good and Bad Database Designs Rule of Thumb Normalisation How to Normalise? Rules of the First Three Normal Forms  Image Source: Evil Martians
Good and Bad Database Designs When designing a database, people tend to do one that captures all or too much of the required information.
It should be noted that more than one design are plausible.
 One design may be better than another.</description>
    </item>
    
    <item>
      <title>Database - Identify the Primary Key</title>
      <link>https://tanducmai.com/posts/database-identify-the-primary-key/</link>
      <pubDate>Fri, 25 Feb 2022 17:54:53 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-identify-the-primary-key/</guid>
      <description>Image Source: Arvindzeclass
Picking a good Primary Key from a list of available Candidate Keys might be an unappealing process, but try to stick to these rules to make your life easier.
Keep The Primary Key As Small As Possible Imagine that the PK will be distributed among other relations.
 1000s of copies of that PK value will appear in the database, which will overload the system.  That is, the smaller they are, the fewer bytes the DBMS has to load into RAM to find related records.</description>
    </item>
    
    <item>
      <title>Database - Key Concepts</title>
      <link>https://tanducmai.com/posts/database-key-concepts/</link>
      <pubDate>Thu, 24 Feb 2022 21:29:52 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-key-concepts/</guid>
      <description>Table Of Contents  What is a Key? Super Key Candidate Key Primary Key Unique Key Surrogate Key Natural Key Foreign Key Non-key Attributes  Image Source: Arvindzeclass
What Is A Key A KEY in the DBMS is a set of one or more attributes whose values can uniquely identify a given tuple within a relation.
There are generally eight types of keys:
 Super Key Candidate Key (CK) (name given to all keys) Primary Key (PK) is a value that identifies a particular tuple.</description>
    </item>
    
    <item>
      <title>Database - Relational Concepts</title>
      <link>https://tanducmai.com/posts/database-relational-concepts/</link>
      <pubDate>Wed, 23 Feb 2022 07:58:02 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-relational-concepts/</guid>
      <description>Table of Contents  General Terminology Relations Attributes Types of Attributes Domains Table Schemas Tuples Put It All Together  General Terminology    Relational Name Common Name Alternative     relation table -   attribute column field   tuple row record    Within a table, every column name must be UNIQUE.
Within a Table every row must be UNIQUE (no duplicate data!).</description>
    </item>
    
    <item>
      <title>Database - Why?</title>
      <link>https://tanducmai.com/posts/database-why/</link>
      <pubDate>Tue, 22 Feb 2022 06:23:37 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-why/</guid>
      <description>Table of Contents  Traditional - Physical Data Storage Modern - Digital Data Storage Database-System Applications  Traditional And Physical Data Storage  Limited by physical size Limited multi-access - a borrowed book can only be viewed by one person at a time. Limited search methods (title, author, subject) Slow turn-around Multiple indexes that must be rigorously maintained. Complex Query Limitations - vast amounts of time wasted counting the number of books on a subject or by an author.</description>
    </item>
    
    <item>
      <title>Database - Fundamentals</title>
      <link>https://tanducmai.com/posts/database-fundamentals/</link>
      <pubDate>Mon, 21 Feb 2022 05:11:42 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/database-fundamentals/</guid>
      <description>Table of Contents  What is a Database? Database Management System (DBMS) Example of a Database Why Bother Storing Data? Examples of Facts Analysed from Stored Data How to Query the Database? More about the Role of a DBMS Structure of a DBMS  Image Source: Toptal
What Is A Database A collection of tables containing data that are used to retrieve information.
A collection of potentially useful data that models real-world or conceptual objects and their relationships.</description>
    </item>
    
    <item>
      <title>Python - OOP - Class Fundamentals</title>
      <link>https://tanducmai.com/posts/python-oop-class-fundamentals/</link>
      <pubDate>Mon, 13 Dec 2021 00:00:00 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/python-oop-class-fundamentals/</guid>
      <description>Objects </description>
    </item>
    
    <item>
      <title>Git - Branch</title>
      <link>https://tanducmai.com/posts/git-branch/</link>
      <pubDate>Mon, 22 Nov 2021 17:13:05 +1030</pubDate>
      
      <guid>https://tanducmai.com/posts/git-branch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Python - Naming Conventions</title>
      <link>https://tanducmai.com/posts/python-naming-conventions/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://tanducmai.com/posts/python-naming-conventions/</guid>
      <description>Table of Contents  Rules The Python Keywords Use of Underscores Readability Matters Style of Naming Variables Sample Variable Names Reference Further Research  Rules Although you are allowed to make up your own names for variables, you must follow these rules:
1. You cannot use one of Python&amp;#39;s keywords as a variable name2. A variable or function name cannot contain spaces, underscore characters &amp;#39;_&amp;#39;can be used instead.3.</description>
    </item>
    
  </channel>
</rss>